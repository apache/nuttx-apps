From 3c58cd579a24a1b3ae829173c3fb124b08bb42d4 Mon Sep 17 00:00:00 2001
From: raiden00pl <raiden00@railab.me>
Date: Wed, 19 Mar 2025 10:44:47 +0100
Subject: [PATCH 5/5] add NuttX support

Signed-off-by: raiden00pl <raiden00@railab.me>
---
 src/can/socket.c  |  6 ++-
 src/io/can.c      | 95 ++++++++++++++++++++++++++++++++++++++++++++++-
 src/io/poll.c     |  2 +-
 src/util/errnum.c | 11 +++---
 src/util/frbuf.c  | 24 ++++++------
 src/util/fwbuf.c  | 37 +++++++++---------
 6 files changed, 136 insertions(+), 39 deletions(-)

diff --git a/src/can/socket.c b/src/can/socket.c
index 4fc133dd..a35b281e 100644
--- a/src/can/socket.c
+++ b/src/can/socket.c
@@ -39,6 +39,10 @@
 #include <linux/can/error.h>
 #endif
 
+#ifdef __NuttX__
+#include <nuttx/can.h>
+#endif
+
 int
 can_frame_is_error(const struct can_frame *frame, enum can_state *pstate,
 		enum can_error *perror)
@@ -51,7 +55,7 @@ can_frame_is_error(const struct can_frame *frame, enum can_state *pstate,
 	enum can_state state = pstate ? *pstate : CAN_STATE_ACTIVE;
 	enum can_error error = perror ? *perror : 0;
 
-#ifdef HAVE_LINUX_CAN_ERROR_H
+#if defined(HAVE_LINUX_CAN_ERROR_H) || defined(__NuttX__)
 	if (frame->can_dlc != CAN_ERR_DLC) {
 		set_errnum(ERRNUM_INVAL);
 		return -1;
diff --git a/src/io/can.c b/src/io/can.c
index ca7e7d95..fed1ae16 100644
--- a/src/io/can.c
+++ b/src/io/can.c
@@ -26,7 +26,7 @@
 #if !LELY_NO_STDIO
 
 #include <lely/util/errnum.h>
-#if !LELY_NO_CAN && defined(__linux__) && HAVE_LINUX_CAN_H
+#if !LELY_NO_CAN && ((defined(__linux__) && HAVE_LINUX_CAN_H) || defined(__NuttX__))
 #include <lely/can/socket.h>
 #endif
 #include "handle.h"
@@ -38,7 +38,7 @@
 #include <assert.h>
 #include <string.h>
 
-#if defined(__linux__) && HAVE_LINUX_CAN_H
+#if (defined(__linux__) && HAVE_LINUX_CAN_H) || defined(__NuttX__)
 
 #ifdef HAVE_LINUX_CAN_ERROR_H
 #include <linux/can/error.h>
@@ -56,6 +56,12 @@
 #include <linux/can/raw.h>
 #endif
 
+#ifdef __NuttX__
+#include <sys/ioctl.h>
+#include <nuttx/can.h>
+#include <net/if.h>
+#endif
+
 /// A CAN device.
 struct can {
 	/// The I/O device base handle.
@@ -384,6 +390,8 @@ io_can_stop(io_handle_t handle)
 
 #endif // HAVE_LINUX_CAN_NETLINK_H && HAVE_LINUX_RTNETLINK_H
 
+
+
 int
 io_can_get_state(io_handle_t handle)
 {
@@ -656,6 +664,89 @@ io_can_set_txqlen(io_handle_t handle, size_t txqlen)
 
 #endif // HAVE_LINUX_CAN_NETLINK_H && HAVE_LINUX_RTNETLINK_H
 
+#if defined(__NuttX__)
+int
+io_can_get_ec(io_handle_t handle, uint16_t *ptxec, uint16_t *prxec)
+{
+  /* tx error count */
+
+  *ptxec = 0;
+
+  /* rx error count */
+
+  *prxec = 0;
+
+  return 0;
+}
+
+int
+io_can_get_bitrate(io_handle_t handle, uint32_t *pbitrate)
+{
+	if (!handle) {
+		errno = EBADF;
+		return -1;
+	}
+
+	if (handle->vtab != &can_vtab) {
+		errno = ENXIO;
+		return -1;
+	}
+	struct can *can = (struct can *)handle;
+  struct ifreq ifr;
+  if_indextoname(can->ifindex, ifr.ifr_name);
+
+  if (ioctl(handle->fd, SIOCGCANBITRATE, &ifr) == -1) {
+		return -1;
+	}
+
+  *pbitrate = ifr.ifr_ifru.ifru_can_data.arbi_bitrate;
+
+  return 0;
+}
+
+int
+io_can_set_bitrate(io_handle_t handle, uint32_t bitrate)
+{
+	if (!handle) {
+		errno = EBADF;
+		return -1;
+	}
+
+	if (handle->vtab != &can_vtab) {
+		errno = ENXIO;
+		return -1;
+	}
+	struct can *can = (struct can *)handle;
+  struct ifreq ifr;
+  if_indextoname(can->ifindex, ifr.ifr_name);
+
+  ifr.ifr_ifru.ifru_can_data.arbi_bitrate = bitrate;
+  ifr.ifr_ifru.ifru_can_data.data_bitrate = bitrate;
+  ifr.ifr_ifru.ifru_can_data.arbi_samplep = 0;
+  ifr.ifr_ifru.ifru_can_data.data_samplep = 0;
+
+  if (ioctl(handle->fd, SIOCSCANBITRATE, &ifr) == -1) {
+		return -1;
+	}
+
+  return 0;
+}
+
+int
+io_can_get_txqlen(io_handle_t handle, size_t *ptxqlen)
+{
+  return -1;
+}
+
+int
+io_can_set_txqlen(io_handle_t handle, size_t txqlen)
+{
+  return -1;
+}
+
+#endif // __NuttX__
+
+
 static void
 can_fini(struct io_handle *handle)
 {
diff --git a/src/io/poll.c b/src/io/poll.c
index d474e337..e07b36ce 100644
--- a/src/io/poll.c
+++ b/src/io/poll.c
@@ -261,7 +261,7 @@ io_poll_watch(io_poll_t *poll, io_handle_t handle, struct io_event *event,
 
 	assert(handle->vtab);
 	switch (handle->vtab->type) {
-#if defined(__linux__) && defined(HAVE_LINUX_CAN_H)
+#if (defined(__linux__) && defined(HAVE_LINUX_CAN_H)) || defined(__NuttX__)
 	case IO_TYPE_CAN:
 #endif
 #if _POSIX_C_SOURCE >= 200112L
diff --git a/src/util/errnum.c b/src/util/errnum.c
index 39e4b28a..3b295b8e 100644
--- a/src/util/errnum.c
+++ b/src/util/errnum.c
@@ -27,6 +27,7 @@
 #include <lely/util/util.h>
 
 #include <string.h>
+#include <netdb.h>
 
 #if _WIN32
 
@@ -38,7 +39,7 @@
 
 #endif // _WIN32
 
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 static const char *gai_strerror_r(int ecode, char *strerrbuf, size_t buflen);
 #endif
 
@@ -545,7 +546,7 @@ errc2num(int errc)
 	default: return 0;
 	}
 #else
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	switch (errc) {
 	case -ABS(EAI_AGAIN): return ERRNUM_AI_AGAIN;
 	case -ABS(EAI_BADFLAGS): return ERRNUM_AI_BADFLAGS;
@@ -910,7 +911,7 @@ errnum2c(errnum_t errnum)
 	default: return 0;
 	}
 #else
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	switch (errnum) {
 	case ERRNUM_AI_AGAIN: return -ABS(EAI_AGAIN);
 	case ERRNUM_AI_BADFLAGS: return -ABS(EAI_BADFLAGS);
@@ -1011,7 +1012,7 @@ errc2str_r(int errc, char *strerrbuf, size_t buflen)
 		strerrbuf[n - 2] = '\0';
 	return strerrbuf;
 #else
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	switch (errc) {
 	case -ABS(EAI_AGAIN):
 		return gai_strerror_r(EAI_AGAIN, strerrbuf, buflen);
@@ -1036,7 +1037,7 @@ errc2str_r(int errc, char *strerrbuf, size_t buflen)
 #endif
 }
 
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 static const char *
 gai_strerror_r(int ecode, char *strerrbuf, size_t buflen)
 {
diff --git a/src/util/frbuf.c b/src/util/frbuf.c
index e01b7677..7157129b 100644
--- a/src/util/frbuf.c
+++ b/src/util/frbuf.c
@@ -41,7 +41,7 @@
 #include <stdio.h>
 #if _POSIX_C_SOURCE >= 200112L
 #include <fcntl.h>
-#if _POSIX_MAPPED_FILES >= 200112L
+#if _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 #include <sys/mman.h>
 #endif
 #include <sys/stat.h>
@@ -57,7 +57,7 @@ struct __frbuf {
 	HANDLE hFileMappingObject;
 	/// The base address of the file mapping.
 	LPVOID lpBaseAddress;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	/// The file descriptor.
 	int fd;
 	/// The base address of the current file mapping.
@@ -75,7 +75,7 @@ struct __frbuf {
 void *
 __frbuf_alloc(void)
 {
-	void *ptr = malloc(sizeof(struct __frbuf));
+  void *ptr = zalloc(sizeof(struct __frbuf));
 	if (!ptr)
 		set_errc(errno2c(errno));
 	return ptr;
@@ -102,7 +102,7 @@ __frbuf_init(struct __frbuf *buf, const char *filename)
 
 	buf->hFileMappingObject = INVALID_HANDLE_VALUE;
 	buf->lpBaseAddress = NULL;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	buf->fd = open(filename, O_RDONLY | O_CLOEXEC);
 	if (buf->fd == -1)
 		return NULL;
@@ -127,7 +127,7 @@ __frbuf_fini(struct __frbuf *buf)
 
 #if _WIN32
 	CloseHandle(buf->hFile);
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	close(buf->fd);
 #else
 	fclose(buf->stream);
@@ -178,7 +178,7 @@ frbuf_get_size(frbuf_t *buf)
 	if (!GetFileSizeEx(buf->hFile, &FileSize))
 		return -1;
 	return FileSize.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	struct stat64 stat;
 	if (fstat64(buf->fd, &stat) == -1)
@@ -223,7 +223,7 @@ frbuf_get_pos(frbuf_t *buf)
 	if (!SetFilePointerEx(buf->hFile, li, &li, FILE_CURRENT))
 		return -1;
 	return li.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	return lseek64(buf->fd, 0, SEEK_CUR);
 #else
@@ -252,7 +252,7 @@ frbuf_set_pos(frbuf_t *buf, intmax_t pos)
 	if (!SetFilePointerEx(buf->hFile, li, &li, FILE_BEGIN))
 		return -1;
 	return li.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	return lseek64(buf->fd, pos, SEEK_SET);
 #else
@@ -285,7 +285,7 @@ frbuf_read(frbuf_t *buf, void *ptr, size_t size)
 	if (!ReadFile(buf->hFile, ptr, size, &nNumberOfBytesRead, NULL))
 		return -1;
 	return nNumberOfBytesRead;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	ssize_t result;
 	do
 		result = read(buf->fd, ptr, size);
@@ -349,7 +349,7 @@ error_ReadFile:
 error_get_pos:
 	SetLastError(dwErrCode);
 	return result;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	ssize_t result;
 #ifdef __linux__
 	do
@@ -453,7 +453,7 @@ error_CreateFileMapping:
 error_size:
 	SetLastError(dwErrCode);
 	return NULL;
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 	long page_size = sysconf(_SC_PAGE_SIZE);
 	if (page_size <= 0)
 		return NULL;
@@ -532,7 +532,7 @@ frbuf_unmap(frbuf_t *buf)
 		buf->hFileMappingObject = INVALID_HANDLE_VALUE;
 		buf->lpBaseAddress = NULL;
 	}
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 	if (buf->addr != MAP_FAILED) {
 		result = munmap(buf->addr, buf->len);
 
diff --git a/src/util/fwbuf.c b/src/util/fwbuf.c
index 22c61fd7..33ba11c7 100644
--- a/src/util/fwbuf.c
+++ b/src/util/fwbuf.c
@@ -48,7 +48,7 @@
 #if _POSIX_C_SOURCE >= 200112L
 #include <fcntl.h>
 #include <libgen.h>
-#if _POSIX_MAPPED_FILES >= 200112L
+#if _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 #include <sys/mman.h>
 #endif
 #include <sys/stat.h>
@@ -72,7 +72,7 @@ struct __fwbuf {
 	LPVOID lpBaseAddress;
 	/// The number of bytes mapped at <b>lpBaseAddress</b>.
 	SIZE_T dwNumberOfBytesToMap;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	/// A pointer to the name of the temporary file.
 	char *tmpname;
 	/// The file descriptor of the directory containing the temporary file.
@@ -175,7 +175,7 @@ error_GetTempFileNameA:
 error_strdup:
 	SetLastError(dwErrCode);
 	return NULL;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	int errsv = 0;
 
 	buf->filename = strdup(filename);
@@ -295,7 +295,7 @@ __fwbuf_fini(struct __fwbuf *buf)
 	fwbuf_commit(buf);
 	set_errc(errc);
 
-#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#if _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	free(buf->tmpname);
 #endif
 	free(buf->filename);
@@ -348,7 +348,7 @@ fwbuf_get_size(fwbuf_t *buf)
 		return -1;
 	}
 	return FileSize.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	struct stat64 stat;
 	if (fstat64(buf->fd, &stat) == -1) {
@@ -388,7 +388,7 @@ fwbuf_set_size(fwbuf_t *buf, intmax_t size)
 		return -1;
 
 	return 0;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	if (ftruncate64(buf->fd, size) == -1) {
 #else
@@ -424,7 +424,7 @@ fwbuf_get_pos(fwbuf_t *buf)
 		return -1;
 	}
 	return li.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 #ifdef __linux__
 	intmax_t pos = lseek64(buf->fd, 0, SEEK_CUR);
 #else
@@ -456,7 +456,8 @@ fwbuf_set_pos(fwbuf_t *buf, intmax_t pos)
 		return -1;
 	}
 	return li.QuadPart;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+/* #elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) */
+#elif  !defined(__NuttX__)
 #ifdef __linux__
 	pos = lseek64(buf->fd, pos, SEEK_SET);
 #else
@@ -503,7 +504,7 @@ fwbuf_write(fwbuf_t *buf, const void *ptr, size_t size)
 		return -1;
 	}
 	return nNumberOfBytesWritten;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	ssize_t result;
 	do
 		result = write(buf->fd, ptr, size);
@@ -587,7 +588,7 @@ error_get_pos:
 error_pos:
 	SetLastError(buf->dwErrCode);
 	return result;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	ssize_t result;
 #ifdef __linux__
 	do
@@ -666,7 +667,7 @@ fwbuf_map(fwbuf_t *buf, intmax_t pos, size_t *psize)
 	if (pos < 0) {
 #if _WIN32
 		SetLastError(buf->dwErrCode = ERROR_INVALID_PARAMETER);
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 		errno = buf->errsv = EINVAL;
 #else
 		set_errnum(buf->errnum = ERRNUM_INVAL);
@@ -676,7 +677,7 @@ fwbuf_map(fwbuf_t *buf, intmax_t pos, size_t *psize)
 	if (pos > (intmax_t)size) {
 #if _WIN32
 		SetLastError(buf->dwErrCode = ERROR_INVALID_PARAMETER);
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 		errno = buf->errsv = EOVERFLOW;
 #else
 		set_errnum(buf->errnum = ERRNUM_OVERFLOW);
@@ -728,7 +729,7 @@ error_CreateFileMapping:
 error_size:
 	SetLastError(buf->dwErrCode);
 	return NULL;
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 	long page_size = sysconf(_SC_PAGE_SIZE);
 	if (page_size <= 0) {
 		buf->errsv = errno;
@@ -863,7 +864,7 @@ fwbuf_unmap(fwbuf_t *buf)
 			buf->dwErrCode = dwErrCode;
 		SetLastError(dwErrCode);
 	}
-#elif _POSIX_MAPPED_FILES >= 200112L
+#elif _POSIX_MAPPED_FILES >= 200112L && !defined(__NuttX__)
 	int errsv = 0;
 	if (buf->errsv) {
 		result = -1;
@@ -931,7 +932,7 @@ fwbuf_clearerr(fwbuf_t *buf)
 
 #if _WIN32
 	buf->dwErrCode = 0;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	buf->errsv = 0;
 #else
 	buf->errnum = 0;
@@ -947,7 +948,7 @@ fwbuf_error(fwbuf_t *buf)
 	if (buf->dwErrCode)
 		SetLastError(buf->dwErrCode);
 	return !!buf->dwErrCode;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	if (buf->errsv)
 		errno = buf->errsv;
 	return !!buf->errsv;
@@ -966,7 +967,7 @@ fwbuf_cancel(fwbuf_t *buf)
 #if _WIN32
 	if (!buf->dwErrCode)
 		buf->dwErrCode = ERROR_OPERATION_ABORTED;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	if (!buf->errsv)
 		buf->errsv = ECANCELED;
 #else
@@ -1013,7 +1014,7 @@ fwbuf_commit(fwbuf_t *buf)
 done:
 	SetLastError(buf->dwErrCode = dwErrCode);
 	return result;
-#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__)
+#elif _POSIX_C_SOURCE >= 200112L && !defined(__NEWLIB__) && !defined(__NuttX__)
 	int errsv = errno;
 
 	if (buf->fd == -1)
-- 
2.48.1

