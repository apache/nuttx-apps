/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: esp_hosted_config.proto */

#ifndef PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED
#define PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct ScanResult ScanResult;
typedef struct ConnectedSTAList ConnectedSTAList;
typedef struct CtrlMsgReqGetMacAddress CtrlMsgReqGetMacAddress;
typedef struct CtrlMsgRespGetMacAddress CtrlMsgRespGetMacAddress;
typedef struct CtrlMsgReqGetMode CtrlMsgReqGetMode;
typedef struct CtrlMsgRespGetMode CtrlMsgRespGetMode;
typedef struct CtrlMsgReqSetMode CtrlMsgReqSetMode;
typedef struct CtrlMsgRespSetMode CtrlMsgRespSetMode;
typedef struct CtrlMsgReqGetStatus CtrlMsgReqGetStatus;
typedef struct CtrlMsgRespGetStatus CtrlMsgRespGetStatus;
typedef struct CtrlMsgReqSetMacAddress CtrlMsgReqSetMacAddress;
typedef struct CtrlMsgRespSetMacAddress CtrlMsgRespSetMacAddress;
typedef struct CtrlMsgReqGetAPConfig CtrlMsgReqGetAPConfig;
typedef struct CtrlMsgRespGetAPConfig CtrlMsgRespGetAPConfig;
typedef struct CtrlMsgReqConnectAP CtrlMsgReqConnectAP;
typedef struct CtrlMsgRespConnectAP CtrlMsgRespConnectAP;
typedef struct CtrlMsgReqGetSoftAPConfig CtrlMsgReqGetSoftAPConfig;
typedef struct CtrlMsgRespGetSoftAPConfig CtrlMsgRespGetSoftAPConfig;
typedef struct CtrlMsgReqStartSoftAP CtrlMsgReqStartSoftAP;
typedef struct CtrlMsgRespStartSoftAP CtrlMsgRespStartSoftAP;
typedef struct CtrlMsgReqScanResult CtrlMsgReqScanResult;
typedef struct CtrlMsgRespScanResult CtrlMsgRespScanResult;
typedef struct CtrlMsgReqSoftAPConnectedSTA CtrlMsgReqSoftAPConnectedSTA;
typedef struct CtrlMsgRespSoftAPConnectedSTA CtrlMsgRespSoftAPConnectedSTA;
typedef struct CtrlMsgReqOTABegin CtrlMsgReqOTABegin;
typedef struct CtrlMsgRespOTABegin CtrlMsgRespOTABegin;
typedef struct CtrlMsgReqOTAWrite CtrlMsgReqOTAWrite;
typedef struct CtrlMsgRespOTAWrite CtrlMsgRespOTAWrite;
typedef struct CtrlMsgReqOTAEnd CtrlMsgReqOTAEnd;
typedef struct CtrlMsgRespOTAEnd CtrlMsgRespOTAEnd;
typedef struct CtrlMsgReqVendorIEData CtrlMsgReqVendorIEData;
typedef struct CtrlMsgReqSetSoftAPVendorSpecificIE CtrlMsgReqSetSoftAPVendorSpecificIE;
typedef struct CtrlMsgRespSetSoftAPVendorSpecificIE CtrlMsgRespSetSoftAPVendorSpecificIE;
typedef struct CtrlMsgReqSetWifiMaxTxPower CtrlMsgReqSetWifiMaxTxPower;
typedef struct CtrlMsgRespSetWifiMaxTxPower CtrlMsgRespSetWifiMaxTxPower;
typedef struct CtrlMsgReqGetWifiCurrTxPower CtrlMsgReqGetWifiCurrTxPower;
typedef struct CtrlMsgRespGetWifiCurrTxPower CtrlMsgRespGetWifiCurrTxPower;
typedef struct CtrlMsgReqConfigHeartbeat CtrlMsgReqConfigHeartbeat;
typedef struct CtrlMsgRespConfigHeartbeat CtrlMsgRespConfigHeartbeat;
typedef struct CtrlMsgEventESPInit CtrlMsgEventESPInit;
typedef struct CtrlMsgEventHeartbeat CtrlMsgEventHeartbeat;
typedef struct CtrlMsgEventStationDisconnectFromAP CtrlMsgEventStationDisconnectFromAP;
typedef struct CtrlMsgEventStationDisconnectFromESPSoftAP CtrlMsgEventStationDisconnectFromESPSoftAP;
typedef struct CtrlMsg CtrlMsg;


/* --- enums --- */

/*
 * Enums similar to ESP IDF 
 */
typedef enum _CtrlVendorIEType {
  CTRL__VENDOR_IETYPE__Beacon = 0,
  CTRL__VENDOR_IETYPE__Probe_req = 1,
  CTRL__VENDOR_IETYPE__Probe_resp = 2,
  CTRL__VENDOR_IETYPE__Assoc_req = 3,
  CTRL__VENDOR_IETYPE__Assoc_resp = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__VENDOR_IETYPE)
} CtrlVendorIEType;
typedef enum _CtrlVendorIEID {
  CTRL__VENDOR_IEID__ID_0 = 0,
  CTRL__VENDOR_IEID__ID_1 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__VENDOR_IEID)
} CtrlVendorIEID;
typedef enum _CtrlWifiMode {
  CTRL__WIFI_MODE__NONE = 0,
  CTRL__WIFI_MODE__STA = 1,
  CTRL__WIFI_MODE__AP = 2,
  CTRL__WIFI_MODE__APSTA = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_MODE)
} CtrlWifiMode;
typedef enum _CtrlWifiBw {
  CTRL__WIFI_BW__BW_Invalid = 0,
  CTRL__WIFI_BW__HT20 = 1,
  CTRL__WIFI_BW__HT40 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_BW)
} CtrlWifiBw;
typedef enum _CtrlWifiPowerSave {
  CTRL__WIFI_POWER_SAVE__PS_Invalid = 0,
  CTRL__WIFI_POWER_SAVE__MIN_MODEM = 1,
  CTRL__WIFI_POWER_SAVE__MAX_MODEM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_POWER_SAVE)
} CtrlWifiPowerSave;
typedef enum _CtrlWifiSecProt {
  CTRL__WIFI_SEC_PROT__Open = 0,
  CTRL__WIFI_SEC_PROT__WEP = 1,
  CTRL__WIFI_SEC_PROT__WPA_PSK = 2,
  CTRL__WIFI_SEC_PROT__WPA2_PSK = 3,
  CTRL__WIFI_SEC_PROT__WPA_WPA2_PSK = 4,
  CTRL__WIFI_SEC_PROT__WPA2_ENTERPRISE = 5,
  CTRL__WIFI_SEC_PROT__WPA3_PSK = 6,
  CTRL__WIFI_SEC_PROT__WPA2_WPA3_PSK = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__WIFI_SEC_PROT)
} CtrlWifiSecProt;
/*
 * enums for Control path 
 */
typedef enum _CtrlStatus {
  CTRL__STATUS__Connected = 0,
  CTRL__STATUS__Not_Connected = 1,
  CTRL__STATUS__No_AP_Found = 2,
  CTRL__STATUS__Connection_Fail = 3,
  CTRL__STATUS__Invalid_Argument = 4,
  CTRL__STATUS__Out_Of_Range = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL__STATUS)
} CtrlStatus;
typedef enum _CtrlMsgType {
  CTRL_MSG_TYPE__MsgType_Invalid = 0,
  CTRL_MSG_TYPE__Req = 1,
  CTRL_MSG_TYPE__Resp = 2,
  CTRL_MSG_TYPE__Event = 3,
  CTRL_MSG_TYPE__MsgType_Max = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG_TYPE)
} CtrlMsgType;
typedef enum _CtrlMsgId {
  CTRL_MSG_ID__MsgId_Invalid = 0,
  /*
   ** Request Msgs *
   */
  CTRL_MSG_ID__Req_Base = 100,
  CTRL_MSG_ID__Req_GetMACAddress = 101,
  CTRL_MSG_ID__Req_SetMacAddress = 102,
  CTRL_MSG_ID__Req_GetWifiMode = 103,
  CTRL_MSG_ID__Req_SetWifiMode = 104,
  CTRL_MSG_ID__Req_GetAPScanList = 105,
  CTRL_MSG_ID__Req_GetAPConfig = 106,
  CTRL_MSG_ID__Req_ConnectAP = 107,
  CTRL_MSG_ID__Req_DisconnectAP = 108,
  CTRL_MSG_ID__Req_GetSoftAPConfig = 109,
  CTRL_MSG_ID__Req_SetSoftAPVendorSpecificIE = 110,
  CTRL_MSG_ID__Req_StartSoftAP = 111,
  CTRL_MSG_ID__Req_GetSoftAPConnectedSTAList = 112,
  CTRL_MSG_ID__Req_StopSoftAP = 113,
  CTRL_MSG_ID__Req_SetPowerSaveMode = 114,
  CTRL_MSG_ID__Req_GetPowerSaveMode = 115,
  CTRL_MSG_ID__Req_OTABegin = 116,
  CTRL_MSG_ID__Req_OTAWrite = 117,
  CTRL_MSG_ID__Req_OTAEnd = 118,
  CTRL_MSG_ID__Req_SetWifiMaxTxPower = 119,
  CTRL_MSG_ID__Req_GetWifiCurrTxPower = 120,
  CTRL_MSG_ID__Req_ConfigHeartbeat = 121,
  /*
   * Add new control path command response before Req_Max
   * and update Req_Max 
   */
  CTRL_MSG_ID__Req_Max = 122,
  /*
   ** Response Msgs *
   */
  CTRL_MSG_ID__Resp_Base = 200,
  CTRL_MSG_ID__Resp_GetMACAddress = 201,
  CTRL_MSG_ID__Resp_SetMacAddress = 202,
  CTRL_MSG_ID__Resp_GetWifiMode = 203,
  CTRL_MSG_ID__Resp_SetWifiMode = 204,
  CTRL_MSG_ID__Resp_GetAPScanList = 205,
  CTRL_MSG_ID__Resp_GetAPConfig = 206,
  CTRL_MSG_ID__Resp_ConnectAP = 207,
  CTRL_MSG_ID__Resp_DisconnectAP = 208,
  CTRL_MSG_ID__Resp_GetSoftAPConfig = 209,
  CTRL_MSG_ID__Resp_SetSoftAPVendorSpecificIE = 210,
  CTRL_MSG_ID__Resp_StartSoftAP = 211,
  CTRL_MSG_ID__Resp_GetSoftAPConnectedSTAList = 212,
  CTRL_MSG_ID__Resp_StopSoftAP = 213,
  CTRL_MSG_ID__Resp_SetPowerSaveMode = 214,
  CTRL_MSG_ID__Resp_GetPowerSaveMode = 215,
  CTRL_MSG_ID__Resp_OTABegin = 216,
  CTRL_MSG_ID__Resp_OTAWrite = 217,
  CTRL_MSG_ID__Resp_OTAEnd = 218,
  CTRL_MSG_ID__Resp_SetWifiMaxTxPower = 219,
  CTRL_MSG_ID__Resp_GetWifiCurrTxPower = 220,
  CTRL_MSG_ID__Resp_ConfigHeartbeat = 221,
  /*
   * Add new control path command response before Resp_Max
   * and update Resp_Max 
   */
  CTRL_MSG_ID__Resp_Max = 222,
  /*
   ** Event Msgs *
   */
  CTRL_MSG_ID__Event_Base = 300,
  CTRL_MSG_ID__Event_ESPInit = 301,
  CTRL_MSG_ID__Event_Heartbeat = 302,
  CTRL_MSG_ID__Event_StationDisconnectFromAP = 303,
  CTRL_MSG_ID__Event_StationDisconnectFromESPSoftAP = 304,
  /*
   * Add new control path command notification before Event_Max
   * and update Event_Max 
   */
  CTRL_MSG_ID__Event_Max = 305
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG_ID)
} CtrlMsgId;

/* --- messages --- */

/*
 * internal supporting structures for CtrlMsg 
 */
struct  ScanResult
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  uint32_t chnl;
  int32_t rssi;
  ProtobufCBinaryData bssid;
  CtrlWifiSecProt sec_prot;
};
#define SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scan_result__descriptor) \
    , {0,NULL}, 0, 0, {0,NULL}, CTRL__WIFI_SEC_PROT__Open }


struct  ConnectedSTAList
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t rssi;
};
#define CONNECTED_STALIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connected_stalist__descriptor) \
    , {0,NULL}, 0 }


/*
 ** Req/Resp structure *
 */
struct  CtrlMsgReqGetMacAddress
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CTRL_MSG__REQ__GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_mac_address__descriptor) \
    , 0 }


struct  CtrlMsgRespGetMacAddress
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_mac_address__descriptor) \
    , {0,NULL}, 0 }


struct  CtrlMsgReqGetMode
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_mode__descriptor) \
     }


struct  CtrlMsgRespGetMode
{
  ProtobufCMessage base;
  int32_t mode;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_mode__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqSetMode
{
  ProtobufCMessage base;
  int32_t mode;
};
#define CTRL_MSG__REQ__SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_mode__descriptor) \
    , 0 }


struct  CtrlMsgRespSetMode
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_mode__descriptor) \
    , 0 }


struct  CtrlMsgReqGetStatus
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_status__descriptor) \
     }


struct  CtrlMsgRespGetStatus
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_status__descriptor) \
    , 0 }


struct  CtrlMsgReqSetMacAddress
{
  ProtobufCMessage base;
  ProtobufCBinaryData mac;
  int32_t mode;
};
#define CTRL_MSG__REQ__SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_mac_address__descriptor) \
    , {0,NULL}, 0 }


struct  CtrlMsgRespSetMacAddress
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_MAC_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_mac_address__descriptor) \
    , 0 }


struct  CtrlMsgReqGetAPConfig
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_apconfig__descriptor) \
     }


struct  CtrlMsgRespGetAPConfig
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  ProtobufCBinaryData bssid;
  int32_t rssi;
  int32_t chnl;
  CtrlWifiSecProt sec_prot;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_apconfig__descriptor) \
    , {0,NULL}, {0,NULL}, 0, 0, CTRL__WIFI_SEC_PROT__Open, 0 }


struct  CtrlMsgReqConnectAP
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  char *bssid;
  protobuf_c_boolean is_wpa3_supported;
  int32_t listen_interval;
};
#define CTRL_MSG__REQ__CONNECT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__connect_ap__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  CtrlMsgRespConnectAP
{
  ProtobufCMessage base;
  int32_t resp;
  ProtobufCBinaryData mac;
};
#define CTRL_MSG__RESP__CONNECT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__connect_ap__descriptor) \
    , 0, {0,NULL} }


struct  CtrlMsgReqGetSoftAPConfig
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_soft_apconfig__descriptor) \
     }


struct  CtrlMsgRespGetSoftAPConfig
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  ProtobufCBinaryData pwd;
  int32_t chnl;
  CtrlWifiSecProt sec_prot;
  int32_t max_conn;
  protobuf_c_boolean ssid_hidden;
  int32_t bw;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_SOFT_APCONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_soft_apconfig__descriptor) \
    , {0,NULL}, {0,NULL}, 0, CTRL__WIFI_SEC_PROT__Open, 0, 0, 0, 0 }


struct  CtrlMsgReqStartSoftAP
{
  ProtobufCMessage base;
  char *ssid;
  char *pwd;
  int32_t chnl;
  CtrlWifiSecProt sec_prot;
  int32_t max_conn;
  protobuf_c_boolean ssid_hidden;
  int32_t bw;
};
#define CTRL_MSG__REQ__START_SOFT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__start_soft_ap__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, CTRL__WIFI_SEC_PROT__Open, 0, 0, 0 }


struct  CtrlMsgRespStartSoftAP
{
  ProtobufCMessage base;
  int32_t resp;
  ProtobufCBinaryData mac;
};
#define CTRL_MSG__RESP__START_SOFT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__start_soft_ap__descriptor) \
    , 0, {0,NULL} }


struct  CtrlMsgReqScanResult
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__scan_result__descriptor) \
     }


struct  CtrlMsgRespScanResult
{
  ProtobufCMessage base;
  uint32_t count;
  size_t n_entries;
  ScanResult **entries;
  int32_t resp;
};
#define CTRL_MSG__RESP__SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__scan_result__descriptor) \
    , 0, 0,NULL, 0 }


struct  CtrlMsgReqSoftAPConnectedSTA
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__SOFT_APCONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__soft_apconnected_sta__descriptor) \
     }


struct  CtrlMsgRespSoftAPConnectedSTA
{
  ProtobufCMessage base;
  uint32_t num;
  size_t n_stations;
  ConnectedSTAList **stations;
  int32_t resp;
};
#define CTRL_MSG__RESP__SOFT_APCONNECTED_STA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__soft_apconnected_sta__descriptor) \
    , 0, 0,NULL, 0 }


struct  CtrlMsgReqOTABegin
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otabegin__descriptor) \
     }


struct  CtrlMsgRespOTABegin
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTABEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otabegin__descriptor) \
    , 0 }


struct  CtrlMsgReqOTAWrite
{
  ProtobufCMessage base;
  ProtobufCBinaryData ota_data;
};
#define CTRL_MSG__REQ__OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otawrite__descriptor) \
    , {0,NULL} }


struct  CtrlMsgRespOTAWrite
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTAWRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otawrite__descriptor) \
    , 0 }


struct  CtrlMsgReqOTAEnd
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__otaend__descriptor) \
     }


struct  CtrlMsgRespOTAEnd
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__OTAEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__otaend__descriptor) \
    , 0 }


struct  CtrlMsgReqVendorIEData
{
  ProtobufCMessage base;
  int32_t element_id;
  int32_t length;
  ProtobufCBinaryData vendor_oui;
  int32_t vendor_oui_type;
  ProtobufCBinaryData payload;
};
#define CTRL_MSG__REQ__VENDOR_IEDATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__vendor_iedata__descriptor) \
    , 0, 0, {0,NULL}, 0, {0,NULL} }


struct  CtrlMsgReqSetSoftAPVendorSpecificIE
{
  ProtobufCMessage base;
  protobuf_c_boolean enable;
  CtrlVendorIEType type;
  CtrlVendorIEID idx;
  CtrlMsgReqVendorIEData *vendor_ie_data;
};
#define CTRL_MSG__REQ__SET_SOFT_APVENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_soft_apvendor_specific_ie__descriptor) \
    , 0, CTRL__VENDOR_IETYPE__Beacon, CTRL__VENDOR_IEID__ID_0, NULL }


struct  CtrlMsgRespSetSoftAPVendorSpecificIE
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_SOFT_APVENDOR_SPECIFIC_IE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_soft_apvendor_specific_ie__descriptor) \
    , 0 }


struct  CtrlMsgReqSetWifiMaxTxPower
{
  ProtobufCMessage base;
  int32_t wifi_max_tx_power;
};
#define CTRL_MSG__REQ__SET_WIFI_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__set_wifi_max_tx_power__descriptor) \
    , 0 }


struct  CtrlMsgRespSetWifiMaxTxPower
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__SET_WIFI_MAX_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__set_wifi_max_tx_power__descriptor) \
    , 0 }


struct  CtrlMsgReqGetWifiCurrTxPower
{
  ProtobufCMessage base;
};
#define CTRL_MSG__REQ__GET_WIFI_CURR_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__get_wifi_curr_tx_power__descriptor) \
     }


struct  CtrlMsgRespGetWifiCurrTxPower
{
  ProtobufCMessage base;
  int32_t wifi_curr_tx_power;
  int32_t resp;
};
#define CTRL_MSG__RESP__GET_WIFI_CURR_TX_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__get_wifi_curr_tx_power__descriptor) \
    , 0, 0 }


struct  CtrlMsgReqConfigHeartbeat
{
  ProtobufCMessage base;
  protobuf_c_boolean enable;
  int32_t duration;
};
#define CTRL_MSG__REQ__CONFIG_HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__req__config_heartbeat__descriptor) \
    , 0, 0 }


struct  CtrlMsgRespConfigHeartbeat
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__RESP__CONFIG_HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__resp__config_heartbeat__descriptor) \
    , 0 }


/*
 ** Event structure *
 */
struct  CtrlMsgEventESPInit
{
  ProtobufCMessage base;
  ProtobufCBinaryData init_data;
};
#define CTRL_MSG__EVENT__ESPINIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__espinit__descriptor) \
    , {0,NULL} }


struct  CtrlMsgEventHeartbeat
{
  ProtobufCMessage base;
  int32_t hb_num;
};
#define CTRL_MSG__EVENT__HEARTBEAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__heartbeat__descriptor) \
    , 0 }


struct  CtrlMsgEventStationDisconnectFromAP
{
  ProtobufCMessage base;
  int32_t resp;
};
#define CTRL_MSG__EVENT__STATION_DISCONNECT_FROM_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__station_disconnect_from_ap__descriptor) \
    , 0 }


struct  CtrlMsgEventStationDisconnectFromESPSoftAP
{
  ProtobufCMessage base;
  int32_t resp;
  ProtobufCBinaryData mac;
};
#define CTRL_MSG__EVENT__STATION_DISCONNECT_FROM_ESPSOFT_AP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__event__station_disconnect_from_espsoft_ap__descriptor) \
    , 0, {0,NULL} }


typedef enum {
  CTRL_MSG__PAYLOAD__NOT_SET = 0,
  CTRL_MSG__PAYLOAD_REQ_GET_MAC_ADDRESS = 101,
  CTRL_MSG__PAYLOAD_REQ_SET_MAC_ADDRESS = 102,
  CTRL_MSG__PAYLOAD_REQ_GET_WIFI_MODE = 103,
  CTRL_MSG__PAYLOAD_REQ_SET_WIFI_MODE = 104,
  CTRL_MSG__PAYLOAD_REQ_SCAN_AP_LIST = 105,
  CTRL_MSG__PAYLOAD_REQ_GET_AP_CONFIG = 106,
  CTRL_MSG__PAYLOAD_REQ_CONNECT_AP = 107,
  CTRL_MSG__PAYLOAD_REQ_DISCONNECT_AP = 108,
  CTRL_MSG__PAYLOAD_REQ_GET_SOFTAP_CONFIG = 109,
  CTRL_MSG__PAYLOAD_REQ_SET_SOFTAP_VENDOR_SPECIFIC_IE = 110,
  CTRL_MSG__PAYLOAD_REQ_START_SOFTAP = 111,
  CTRL_MSG__PAYLOAD_REQ_SOFTAP_CONNECTED_STAS_LIST = 112,
  CTRL_MSG__PAYLOAD_REQ_STOP_SOFTAP = 113,
  CTRL_MSG__PAYLOAD_REQ_SET_POWER_SAVE_MODE = 114,
  CTRL_MSG__PAYLOAD_REQ_GET_POWER_SAVE_MODE = 115,
  CTRL_MSG__PAYLOAD_REQ_OTA_BEGIN = 116,
  CTRL_MSG__PAYLOAD_REQ_OTA_WRITE = 117,
  CTRL_MSG__PAYLOAD_REQ_OTA_END = 118,
  CTRL_MSG__PAYLOAD_REQ_SET_WIFI_MAX_TX_POWER = 119,
  CTRL_MSG__PAYLOAD_REQ_GET_WIFI_CURR_TX_POWER = 120,
  CTRL_MSG__PAYLOAD_REQ_CONFIG_HEARTBEAT = 121,
  CTRL_MSG__PAYLOAD_RESP_GET_MAC_ADDRESS = 201,
  CTRL_MSG__PAYLOAD_RESP_SET_MAC_ADDRESS = 202,
  CTRL_MSG__PAYLOAD_RESP_GET_WIFI_MODE = 203,
  CTRL_MSG__PAYLOAD_RESP_SET_WIFI_MODE = 204,
  CTRL_MSG__PAYLOAD_RESP_SCAN_AP_LIST = 205,
  CTRL_MSG__PAYLOAD_RESP_GET_AP_CONFIG = 206,
  CTRL_MSG__PAYLOAD_RESP_CONNECT_AP = 207,
  CTRL_MSG__PAYLOAD_RESP_DISCONNECT_AP = 208,
  CTRL_MSG__PAYLOAD_RESP_GET_SOFTAP_CONFIG = 209,
  CTRL_MSG__PAYLOAD_RESP_SET_SOFTAP_VENDOR_SPECIFIC_IE = 210,
  CTRL_MSG__PAYLOAD_RESP_START_SOFTAP = 211,
  CTRL_MSG__PAYLOAD_RESP_SOFTAP_CONNECTED_STAS_LIST = 212,
  CTRL_MSG__PAYLOAD_RESP_STOP_SOFTAP = 213,
  CTRL_MSG__PAYLOAD_RESP_SET_POWER_SAVE_MODE = 214,
  CTRL_MSG__PAYLOAD_RESP_GET_POWER_SAVE_MODE = 215,
  CTRL_MSG__PAYLOAD_RESP_OTA_BEGIN = 216,
  CTRL_MSG__PAYLOAD_RESP_OTA_WRITE = 217,
  CTRL_MSG__PAYLOAD_RESP_OTA_END = 218,
  CTRL_MSG__PAYLOAD_RESP_SET_WIFI_MAX_TX_POWER = 219,
  CTRL_MSG__PAYLOAD_RESP_GET_WIFI_CURR_TX_POWER = 220,
  CTRL_MSG__PAYLOAD_RESP_CONFIG_HEARTBEAT = 221,
  CTRL_MSG__PAYLOAD_EVENT_ESP_INIT = 301,
  CTRL_MSG__PAYLOAD_EVENT_HEARTBEAT = 302,
  CTRL_MSG__PAYLOAD_EVENT_STATION_DISCONNECT_FROM__AP = 303,
  CTRL_MSG__PAYLOAD_EVENT_STATION_DISCONNECT_FROM__ESP__SOFT_AP = 304
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRL_MSG__PAYLOAD__CASE)
} CtrlMsg__PayloadCase;

struct  CtrlMsg
{
  ProtobufCMessage base;
  /*
   * msg_type could be req, resp or Event 
   */
  CtrlMsgType msg_type;
  /*
   * msg id 
   */
  CtrlMsgId msg_id;
  CtrlMsg__PayloadCase payload_case;
  union {
    /*
     ** Requests *
     */
    CtrlMsgReqGetMacAddress *req_get_mac_address;
    CtrlMsgReqSetMacAddress *req_set_mac_address;
    CtrlMsgReqGetMode *req_get_wifi_mode;
    CtrlMsgReqSetMode *req_set_wifi_mode;
    CtrlMsgReqScanResult *req_scan_ap_list;
    CtrlMsgReqGetAPConfig *req_get_ap_config;
    CtrlMsgReqConnectAP *req_connect_ap;
    CtrlMsgReqGetStatus *req_disconnect_ap;
    CtrlMsgReqGetSoftAPConfig *req_get_softap_config;
    CtrlMsgReqSetSoftAPVendorSpecificIE *req_set_softap_vendor_specific_ie;
    CtrlMsgReqStartSoftAP *req_start_softap;
    CtrlMsgReqSoftAPConnectedSTA *req_softap_connected_stas_list;
    CtrlMsgReqGetStatus *req_stop_softap;
    CtrlMsgReqSetMode *req_set_power_save_mode;
    CtrlMsgReqGetMode *req_get_power_save_mode;
    CtrlMsgReqOTABegin *req_ota_begin;
    CtrlMsgReqOTAWrite *req_ota_write;
    CtrlMsgReqOTAEnd *req_ota_end;
    CtrlMsgReqSetWifiMaxTxPower *req_set_wifi_max_tx_power;
    CtrlMsgReqGetWifiCurrTxPower *req_get_wifi_curr_tx_power;
    CtrlMsgReqConfigHeartbeat *req_config_heartbeat;
    /*
     ** Responses *
     */
    CtrlMsgRespGetMacAddress *resp_get_mac_address;
    CtrlMsgRespSetMacAddress *resp_set_mac_address;
    CtrlMsgRespGetMode *resp_get_wifi_mode;
    CtrlMsgRespSetMode *resp_set_wifi_mode;
    CtrlMsgRespScanResult *resp_scan_ap_list;
    CtrlMsgRespGetAPConfig *resp_get_ap_config;
    CtrlMsgRespConnectAP *resp_connect_ap;
    CtrlMsgRespGetStatus *resp_disconnect_ap;
    CtrlMsgRespGetSoftAPConfig *resp_get_softap_config;
    CtrlMsgRespSetSoftAPVendorSpecificIE *resp_set_softap_vendor_specific_ie;
    CtrlMsgRespStartSoftAP *resp_start_softap;
    CtrlMsgRespSoftAPConnectedSTA *resp_softap_connected_stas_list;
    CtrlMsgRespGetStatus *resp_stop_softap;
    CtrlMsgRespSetMode *resp_set_power_save_mode;
    CtrlMsgRespGetMode *resp_get_power_save_mode;
    CtrlMsgRespOTABegin *resp_ota_begin;
    CtrlMsgRespOTAWrite *resp_ota_write;
    CtrlMsgRespOTAEnd *resp_ota_end;
    CtrlMsgRespSetWifiMaxTxPower *resp_set_wifi_max_tx_power;
    CtrlMsgRespGetWifiCurrTxPower *resp_get_wifi_curr_tx_power;
    CtrlMsgRespConfigHeartbeat *resp_config_heartbeat;
    /*
     ** Notifications *
     */
    CtrlMsgEventESPInit *event_esp_init;
    CtrlMsgEventHeartbeat *event_heartbeat;
    CtrlMsgEventStationDisconnectFromAP *event_station_disconnect_from_ap;
    CtrlMsgEventStationDisconnectFromESPSoftAP *event_station_disconnect_from_esp_softap;
  };
};
#define CTRL_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctrl_msg__descriptor) \
    , CTRL_MSG_TYPE__MsgType_Invalid, CTRL_MSG_ID__MsgId_Invalid, CTRL_MSG__PAYLOAD__NOT_SET, {0} }


/* ScanResult methods */
void   scan_result__init
                     (ScanResult         *message);
size_t scan_result__get_packed_size
                     (const ScanResult   *message);
size_t scan_result__pack
                     (const ScanResult   *message,
                      uint8_t             *out);
size_t scan_result__pack_to_buffer
                     (const ScanResult   *message,
                      ProtobufCBuffer     *buffer);
ScanResult *
       scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scan_result__free_unpacked
                     (ScanResult *message,
                      ProtobufCAllocator *allocator);
/* ConnectedSTAList methods */
void   connected_stalist__init
                     (ConnectedSTAList         *message);
size_t connected_stalist__get_packed_size
                     (const ConnectedSTAList   *message);
size_t connected_stalist__pack
                     (const ConnectedSTAList   *message,
                      uint8_t             *out);
size_t connected_stalist__pack_to_buffer
                     (const ConnectedSTAList   *message,
                      ProtobufCBuffer     *buffer);
ConnectedSTAList *
       connected_stalist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connected_stalist__free_unpacked
                     (ConnectedSTAList *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetMacAddress methods */
void   ctrl_msg__req__get_mac_address__init
                     (CtrlMsgReqGetMacAddress         *message);
size_t ctrl_msg__req__get_mac_address__get_packed_size
                     (const CtrlMsgReqGetMacAddress   *message);
size_t ctrl_msg__req__get_mac_address__pack
                     (const CtrlMsgReqGetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_mac_address__pack_to_buffer
                     (const CtrlMsgReqGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetMacAddress *
       ctrl_msg__req__get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_mac_address__free_unpacked
                     (CtrlMsgReqGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetMacAddress methods */
void   ctrl_msg__resp__get_mac_address__init
                     (CtrlMsgRespGetMacAddress         *message);
size_t ctrl_msg__resp__get_mac_address__get_packed_size
                     (const CtrlMsgRespGetMacAddress   *message);
size_t ctrl_msg__resp__get_mac_address__pack
                     (const CtrlMsgRespGetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_mac_address__pack_to_buffer
                     (const CtrlMsgRespGetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetMacAddress *
       ctrl_msg__resp__get_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_mac_address__free_unpacked
                     (CtrlMsgRespGetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetMode methods */
void   ctrl_msg__req__get_mode__init
                     (CtrlMsgReqGetMode         *message);
size_t ctrl_msg__req__get_mode__get_packed_size
                     (const CtrlMsgReqGetMode   *message);
size_t ctrl_msg__req__get_mode__pack
                     (const CtrlMsgReqGetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_mode__pack_to_buffer
                     (const CtrlMsgReqGetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetMode *
       ctrl_msg__req__get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_mode__free_unpacked
                     (CtrlMsgReqGetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetMode methods */
void   ctrl_msg__resp__get_mode__init
                     (CtrlMsgRespGetMode         *message);
size_t ctrl_msg__resp__get_mode__get_packed_size
                     (const CtrlMsgRespGetMode   *message);
size_t ctrl_msg__resp__get_mode__pack
                     (const CtrlMsgRespGetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_mode__pack_to_buffer
                     (const CtrlMsgRespGetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetMode *
       ctrl_msg__resp__get_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_mode__free_unpacked
                     (CtrlMsgRespGetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetMode methods */
void   ctrl_msg__req__set_mode__init
                     (CtrlMsgReqSetMode         *message);
size_t ctrl_msg__req__set_mode__get_packed_size
                     (const CtrlMsgReqSetMode   *message);
size_t ctrl_msg__req__set_mode__pack
                     (const CtrlMsgReqSetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_mode__pack_to_buffer
                     (const CtrlMsgReqSetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetMode *
       ctrl_msg__req__set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_mode__free_unpacked
                     (CtrlMsgReqSetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetMode methods */
void   ctrl_msg__resp__set_mode__init
                     (CtrlMsgRespSetMode         *message);
size_t ctrl_msg__resp__set_mode__get_packed_size
                     (const CtrlMsgRespSetMode   *message);
size_t ctrl_msg__resp__set_mode__pack
                     (const CtrlMsgRespSetMode   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_mode__pack_to_buffer
                     (const CtrlMsgRespSetMode   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetMode *
       ctrl_msg__resp__set_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_mode__free_unpacked
                     (CtrlMsgRespSetMode *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetStatus methods */
void   ctrl_msg__req__get_status__init
                     (CtrlMsgReqGetStatus         *message);
size_t ctrl_msg__req__get_status__get_packed_size
                     (const CtrlMsgReqGetStatus   *message);
size_t ctrl_msg__req__get_status__pack
                     (const CtrlMsgReqGetStatus   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_status__pack_to_buffer
                     (const CtrlMsgReqGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetStatus *
       ctrl_msg__req__get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_status__free_unpacked
                     (CtrlMsgReqGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetStatus methods */
void   ctrl_msg__resp__get_status__init
                     (CtrlMsgRespGetStatus         *message);
size_t ctrl_msg__resp__get_status__get_packed_size
                     (const CtrlMsgRespGetStatus   *message);
size_t ctrl_msg__resp__get_status__pack
                     (const CtrlMsgRespGetStatus   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_status__pack_to_buffer
                     (const CtrlMsgRespGetStatus   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetStatus *
       ctrl_msg__resp__get_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_status__free_unpacked
                     (CtrlMsgRespGetStatus *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetMacAddress methods */
void   ctrl_msg__req__set_mac_address__init
                     (CtrlMsgReqSetMacAddress         *message);
size_t ctrl_msg__req__set_mac_address__get_packed_size
                     (const CtrlMsgReqSetMacAddress   *message);
size_t ctrl_msg__req__set_mac_address__pack
                     (const CtrlMsgReqSetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_mac_address__pack_to_buffer
                     (const CtrlMsgReqSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetMacAddress *
       ctrl_msg__req__set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_mac_address__free_unpacked
                     (CtrlMsgReqSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetMacAddress methods */
void   ctrl_msg__resp__set_mac_address__init
                     (CtrlMsgRespSetMacAddress         *message);
size_t ctrl_msg__resp__set_mac_address__get_packed_size
                     (const CtrlMsgRespSetMacAddress   *message);
size_t ctrl_msg__resp__set_mac_address__pack
                     (const CtrlMsgRespSetMacAddress   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_mac_address__pack_to_buffer
                     (const CtrlMsgRespSetMacAddress   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetMacAddress *
       ctrl_msg__resp__set_mac_address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_mac_address__free_unpacked
                     (CtrlMsgRespSetMacAddress *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetAPConfig methods */
void   ctrl_msg__req__get_apconfig__init
                     (CtrlMsgReqGetAPConfig         *message);
size_t ctrl_msg__req__get_apconfig__get_packed_size
                     (const CtrlMsgReqGetAPConfig   *message);
size_t ctrl_msg__req__get_apconfig__pack
                     (const CtrlMsgReqGetAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_apconfig__pack_to_buffer
                     (const CtrlMsgReqGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetAPConfig *
       ctrl_msg__req__get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_apconfig__free_unpacked
                     (CtrlMsgReqGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetAPConfig methods */
void   ctrl_msg__resp__get_apconfig__init
                     (CtrlMsgRespGetAPConfig         *message);
size_t ctrl_msg__resp__get_apconfig__get_packed_size
                     (const CtrlMsgRespGetAPConfig   *message);
size_t ctrl_msg__resp__get_apconfig__pack
                     (const CtrlMsgRespGetAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_apconfig__pack_to_buffer
                     (const CtrlMsgRespGetAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetAPConfig *
       ctrl_msg__resp__get_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_apconfig__free_unpacked
                     (CtrlMsgRespGetAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqConnectAP methods */
void   ctrl_msg__req__connect_ap__init
                     (CtrlMsgReqConnectAP         *message);
size_t ctrl_msg__req__connect_ap__get_packed_size
                     (const CtrlMsgReqConnectAP   *message);
size_t ctrl_msg__req__connect_ap__pack
                     (const CtrlMsgReqConnectAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__connect_ap__pack_to_buffer
                     (const CtrlMsgReqConnectAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqConnectAP *
       ctrl_msg__req__connect_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__connect_ap__free_unpacked
                     (CtrlMsgReqConnectAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespConnectAP methods */
void   ctrl_msg__resp__connect_ap__init
                     (CtrlMsgRespConnectAP         *message);
size_t ctrl_msg__resp__connect_ap__get_packed_size
                     (const CtrlMsgRespConnectAP   *message);
size_t ctrl_msg__resp__connect_ap__pack
                     (const CtrlMsgRespConnectAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__connect_ap__pack_to_buffer
                     (const CtrlMsgRespConnectAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespConnectAP *
       ctrl_msg__resp__connect_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__connect_ap__free_unpacked
                     (CtrlMsgRespConnectAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetSoftAPConfig methods */
void   ctrl_msg__req__get_soft_apconfig__init
                     (CtrlMsgReqGetSoftAPConfig         *message);
size_t ctrl_msg__req__get_soft_apconfig__get_packed_size
                     (const CtrlMsgReqGetSoftAPConfig   *message);
size_t ctrl_msg__req__get_soft_apconfig__pack
                     (const CtrlMsgReqGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_soft_apconfig__pack_to_buffer
                     (const CtrlMsgReqGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetSoftAPConfig *
       ctrl_msg__req__get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_soft_apconfig__free_unpacked
                     (CtrlMsgReqGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetSoftAPConfig methods */
void   ctrl_msg__resp__get_soft_apconfig__init
                     (CtrlMsgRespGetSoftAPConfig         *message);
size_t ctrl_msg__resp__get_soft_apconfig__get_packed_size
                     (const CtrlMsgRespGetSoftAPConfig   *message);
size_t ctrl_msg__resp__get_soft_apconfig__pack
                     (const CtrlMsgRespGetSoftAPConfig   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_soft_apconfig__pack_to_buffer
                     (const CtrlMsgRespGetSoftAPConfig   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetSoftAPConfig *
       ctrl_msg__resp__get_soft_apconfig__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_soft_apconfig__free_unpacked
                     (CtrlMsgRespGetSoftAPConfig *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqStartSoftAP methods */
void   ctrl_msg__req__start_soft_ap__init
                     (CtrlMsgReqStartSoftAP         *message);
size_t ctrl_msg__req__start_soft_ap__get_packed_size
                     (const CtrlMsgReqStartSoftAP   *message);
size_t ctrl_msg__req__start_soft_ap__pack
                     (const CtrlMsgReqStartSoftAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__start_soft_ap__pack_to_buffer
                     (const CtrlMsgReqStartSoftAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqStartSoftAP *
       ctrl_msg__req__start_soft_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__start_soft_ap__free_unpacked
                     (CtrlMsgReqStartSoftAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespStartSoftAP methods */
void   ctrl_msg__resp__start_soft_ap__init
                     (CtrlMsgRespStartSoftAP         *message);
size_t ctrl_msg__resp__start_soft_ap__get_packed_size
                     (const CtrlMsgRespStartSoftAP   *message);
size_t ctrl_msg__resp__start_soft_ap__pack
                     (const CtrlMsgRespStartSoftAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__start_soft_ap__pack_to_buffer
                     (const CtrlMsgRespStartSoftAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespStartSoftAP *
       ctrl_msg__resp__start_soft_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__start_soft_ap__free_unpacked
                     (CtrlMsgRespStartSoftAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqScanResult methods */
void   ctrl_msg__req__scan_result__init
                     (CtrlMsgReqScanResult         *message);
size_t ctrl_msg__req__scan_result__get_packed_size
                     (const CtrlMsgReqScanResult   *message);
size_t ctrl_msg__req__scan_result__pack
                     (const CtrlMsgReqScanResult   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__scan_result__pack_to_buffer
                     (const CtrlMsgReqScanResult   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqScanResult *
       ctrl_msg__req__scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__scan_result__free_unpacked
                     (CtrlMsgReqScanResult *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespScanResult methods */
void   ctrl_msg__resp__scan_result__init
                     (CtrlMsgRespScanResult         *message);
size_t ctrl_msg__resp__scan_result__get_packed_size
                     (const CtrlMsgRespScanResult   *message);
size_t ctrl_msg__resp__scan_result__pack
                     (const CtrlMsgRespScanResult   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__scan_result__pack_to_buffer
                     (const CtrlMsgRespScanResult   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespScanResult *
       ctrl_msg__resp__scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__scan_result__free_unpacked
                     (CtrlMsgRespScanResult *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSoftAPConnectedSTA methods */
void   ctrl_msg__req__soft_apconnected_sta__init
                     (CtrlMsgReqSoftAPConnectedSTA         *message);
size_t ctrl_msg__req__soft_apconnected_sta__get_packed_size
                     (const CtrlMsgReqSoftAPConnectedSTA   *message);
size_t ctrl_msg__req__soft_apconnected_sta__pack
                     (const CtrlMsgReqSoftAPConnectedSTA   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__soft_apconnected_sta__pack_to_buffer
                     (const CtrlMsgReqSoftAPConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSoftAPConnectedSTA *
       ctrl_msg__req__soft_apconnected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__soft_apconnected_sta__free_unpacked
                     (CtrlMsgReqSoftAPConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSoftAPConnectedSTA methods */
void   ctrl_msg__resp__soft_apconnected_sta__init
                     (CtrlMsgRespSoftAPConnectedSTA         *message);
size_t ctrl_msg__resp__soft_apconnected_sta__get_packed_size
                     (const CtrlMsgRespSoftAPConnectedSTA   *message);
size_t ctrl_msg__resp__soft_apconnected_sta__pack
                     (const CtrlMsgRespSoftAPConnectedSTA   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__soft_apconnected_sta__pack_to_buffer
                     (const CtrlMsgRespSoftAPConnectedSTA   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSoftAPConnectedSTA *
       ctrl_msg__resp__soft_apconnected_sta__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__soft_apconnected_sta__free_unpacked
                     (CtrlMsgRespSoftAPConnectedSTA *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTABegin methods */
void   ctrl_msg__req__otabegin__init
                     (CtrlMsgReqOTABegin         *message);
size_t ctrl_msg__req__otabegin__get_packed_size
                     (const CtrlMsgReqOTABegin   *message);
size_t ctrl_msg__req__otabegin__pack
                     (const CtrlMsgReqOTABegin   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otabegin__pack_to_buffer
                     (const CtrlMsgReqOTABegin   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTABegin *
       ctrl_msg__req__otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otabegin__free_unpacked
                     (CtrlMsgReqOTABegin *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTABegin methods */
void   ctrl_msg__resp__otabegin__init
                     (CtrlMsgRespOTABegin         *message);
size_t ctrl_msg__resp__otabegin__get_packed_size
                     (const CtrlMsgRespOTABegin   *message);
size_t ctrl_msg__resp__otabegin__pack
                     (const CtrlMsgRespOTABegin   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otabegin__pack_to_buffer
                     (const CtrlMsgRespOTABegin   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTABegin *
       ctrl_msg__resp__otabegin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otabegin__free_unpacked
                     (CtrlMsgRespOTABegin *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTAWrite methods */
void   ctrl_msg__req__otawrite__init
                     (CtrlMsgReqOTAWrite         *message);
size_t ctrl_msg__req__otawrite__get_packed_size
                     (const CtrlMsgReqOTAWrite   *message);
size_t ctrl_msg__req__otawrite__pack
                     (const CtrlMsgReqOTAWrite   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otawrite__pack_to_buffer
                     (const CtrlMsgReqOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTAWrite *
       ctrl_msg__req__otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otawrite__free_unpacked
                     (CtrlMsgReqOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTAWrite methods */
void   ctrl_msg__resp__otawrite__init
                     (CtrlMsgRespOTAWrite         *message);
size_t ctrl_msg__resp__otawrite__get_packed_size
                     (const CtrlMsgRespOTAWrite   *message);
size_t ctrl_msg__resp__otawrite__pack
                     (const CtrlMsgRespOTAWrite   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otawrite__pack_to_buffer
                     (const CtrlMsgRespOTAWrite   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTAWrite *
       ctrl_msg__resp__otawrite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otawrite__free_unpacked
                     (CtrlMsgRespOTAWrite *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqOTAEnd methods */
void   ctrl_msg__req__otaend__init
                     (CtrlMsgReqOTAEnd         *message);
size_t ctrl_msg__req__otaend__get_packed_size
                     (const CtrlMsgReqOTAEnd   *message);
size_t ctrl_msg__req__otaend__pack
                     (const CtrlMsgReqOTAEnd   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__otaend__pack_to_buffer
                     (const CtrlMsgReqOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqOTAEnd *
       ctrl_msg__req__otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__otaend__free_unpacked
                     (CtrlMsgReqOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespOTAEnd methods */
void   ctrl_msg__resp__otaend__init
                     (CtrlMsgRespOTAEnd         *message);
size_t ctrl_msg__resp__otaend__get_packed_size
                     (const CtrlMsgRespOTAEnd   *message);
size_t ctrl_msg__resp__otaend__pack
                     (const CtrlMsgRespOTAEnd   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__otaend__pack_to_buffer
                     (const CtrlMsgRespOTAEnd   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespOTAEnd *
       ctrl_msg__resp__otaend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__otaend__free_unpacked
                     (CtrlMsgRespOTAEnd *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqVendorIEData methods */
void   ctrl_msg__req__vendor_iedata__init
                     (CtrlMsgReqVendorIEData         *message);
size_t ctrl_msg__req__vendor_iedata__get_packed_size
                     (const CtrlMsgReqVendorIEData   *message);
size_t ctrl_msg__req__vendor_iedata__pack
                     (const CtrlMsgReqVendorIEData   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__vendor_iedata__pack_to_buffer
                     (const CtrlMsgReqVendorIEData   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqVendorIEData *
       ctrl_msg__req__vendor_iedata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__vendor_iedata__free_unpacked
                     (CtrlMsgReqVendorIEData *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetSoftAPVendorSpecificIE methods */
void   ctrl_msg__req__set_soft_apvendor_specific_ie__init
                     (CtrlMsgReqSetSoftAPVendorSpecificIE         *message);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__get_packed_size
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__pack
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_soft_apvendor_specific_ie__pack_to_buffer
                     (const CtrlMsgReqSetSoftAPVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetSoftAPVendorSpecificIE *
       ctrl_msg__req__set_soft_apvendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_soft_apvendor_specific_ie__free_unpacked
                     (CtrlMsgReqSetSoftAPVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetSoftAPVendorSpecificIE methods */
void   ctrl_msg__resp__set_soft_apvendor_specific_ie__init
                     (CtrlMsgRespSetSoftAPVendorSpecificIE         *message);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__get_packed_size
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__pack
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_soft_apvendor_specific_ie__pack_to_buffer
                     (const CtrlMsgRespSetSoftAPVendorSpecificIE   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetSoftAPVendorSpecificIE *
       ctrl_msg__resp__set_soft_apvendor_specific_ie__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_soft_apvendor_specific_ie__free_unpacked
                     (CtrlMsgRespSetSoftAPVendorSpecificIE *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqSetWifiMaxTxPower methods */
void   ctrl_msg__req__set_wifi_max_tx_power__init
                     (CtrlMsgReqSetWifiMaxTxPower         *message);
size_t ctrl_msg__req__set_wifi_max_tx_power__get_packed_size
                     (const CtrlMsgReqSetWifiMaxTxPower   *message);
size_t ctrl_msg__req__set_wifi_max_tx_power__pack
                     (const CtrlMsgReqSetWifiMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__set_wifi_max_tx_power__pack_to_buffer
                     (const CtrlMsgReqSetWifiMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqSetWifiMaxTxPower *
       ctrl_msg__req__set_wifi_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__set_wifi_max_tx_power__free_unpacked
                     (CtrlMsgReqSetWifiMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespSetWifiMaxTxPower methods */
void   ctrl_msg__resp__set_wifi_max_tx_power__init
                     (CtrlMsgRespSetWifiMaxTxPower         *message);
size_t ctrl_msg__resp__set_wifi_max_tx_power__get_packed_size
                     (const CtrlMsgRespSetWifiMaxTxPower   *message);
size_t ctrl_msg__resp__set_wifi_max_tx_power__pack
                     (const CtrlMsgRespSetWifiMaxTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__set_wifi_max_tx_power__pack_to_buffer
                     (const CtrlMsgRespSetWifiMaxTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespSetWifiMaxTxPower *
       ctrl_msg__resp__set_wifi_max_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__set_wifi_max_tx_power__free_unpacked
                     (CtrlMsgRespSetWifiMaxTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqGetWifiCurrTxPower methods */
void   ctrl_msg__req__get_wifi_curr_tx_power__init
                     (CtrlMsgReqGetWifiCurrTxPower         *message);
size_t ctrl_msg__req__get_wifi_curr_tx_power__get_packed_size
                     (const CtrlMsgReqGetWifiCurrTxPower   *message);
size_t ctrl_msg__req__get_wifi_curr_tx_power__pack
                     (const CtrlMsgReqGetWifiCurrTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__get_wifi_curr_tx_power__pack_to_buffer
                     (const CtrlMsgReqGetWifiCurrTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqGetWifiCurrTxPower *
       ctrl_msg__req__get_wifi_curr_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__get_wifi_curr_tx_power__free_unpacked
                     (CtrlMsgReqGetWifiCurrTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespGetWifiCurrTxPower methods */
void   ctrl_msg__resp__get_wifi_curr_tx_power__init
                     (CtrlMsgRespGetWifiCurrTxPower         *message);
size_t ctrl_msg__resp__get_wifi_curr_tx_power__get_packed_size
                     (const CtrlMsgRespGetWifiCurrTxPower   *message);
size_t ctrl_msg__resp__get_wifi_curr_tx_power__pack
                     (const CtrlMsgRespGetWifiCurrTxPower   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__get_wifi_curr_tx_power__pack_to_buffer
                     (const CtrlMsgRespGetWifiCurrTxPower   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespGetWifiCurrTxPower *
       ctrl_msg__resp__get_wifi_curr_tx_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__get_wifi_curr_tx_power__free_unpacked
                     (CtrlMsgRespGetWifiCurrTxPower *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgReqConfigHeartbeat methods */
void   ctrl_msg__req__config_heartbeat__init
                     (CtrlMsgReqConfigHeartbeat         *message);
size_t ctrl_msg__req__config_heartbeat__get_packed_size
                     (const CtrlMsgReqConfigHeartbeat   *message);
size_t ctrl_msg__req__config_heartbeat__pack
                     (const CtrlMsgReqConfigHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__req__config_heartbeat__pack_to_buffer
                     (const CtrlMsgReqConfigHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgReqConfigHeartbeat *
       ctrl_msg__req__config_heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__req__config_heartbeat__free_unpacked
                     (CtrlMsgReqConfigHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgRespConfigHeartbeat methods */
void   ctrl_msg__resp__config_heartbeat__init
                     (CtrlMsgRespConfigHeartbeat         *message);
size_t ctrl_msg__resp__config_heartbeat__get_packed_size
                     (const CtrlMsgRespConfigHeartbeat   *message);
size_t ctrl_msg__resp__config_heartbeat__pack
                     (const CtrlMsgRespConfigHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__resp__config_heartbeat__pack_to_buffer
                     (const CtrlMsgRespConfigHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgRespConfigHeartbeat *
       ctrl_msg__resp__config_heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__resp__config_heartbeat__free_unpacked
                     (CtrlMsgRespConfigHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventESPInit methods */
void   ctrl_msg__event__espinit__init
                     (CtrlMsgEventESPInit         *message);
size_t ctrl_msg__event__espinit__get_packed_size
                     (const CtrlMsgEventESPInit   *message);
size_t ctrl_msg__event__espinit__pack
                     (const CtrlMsgEventESPInit   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__espinit__pack_to_buffer
                     (const CtrlMsgEventESPInit   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventESPInit *
       ctrl_msg__event__espinit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__espinit__free_unpacked
                     (CtrlMsgEventESPInit *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventHeartbeat methods */
void   ctrl_msg__event__heartbeat__init
                     (CtrlMsgEventHeartbeat         *message);
size_t ctrl_msg__event__heartbeat__get_packed_size
                     (const CtrlMsgEventHeartbeat   *message);
size_t ctrl_msg__event__heartbeat__pack
                     (const CtrlMsgEventHeartbeat   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__heartbeat__pack_to_buffer
                     (const CtrlMsgEventHeartbeat   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventHeartbeat *
       ctrl_msg__event__heartbeat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__heartbeat__free_unpacked
                     (CtrlMsgEventHeartbeat *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventStationDisconnectFromAP methods */
void   ctrl_msg__event__station_disconnect_from_ap__init
                     (CtrlMsgEventStationDisconnectFromAP         *message);
size_t ctrl_msg__event__station_disconnect_from_ap__get_packed_size
                     (const CtrlMsgEventStationDisconnectFromAP   *message);
size_t ctrl_msg__event__station_disconnect_from_ap__pack
                     (const CtrlMsgEventStationDisconnectFromAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__station_disconnect_from_ap__pack_to_buffer
                     (const CtrlMsgEventStationDisconnectFromAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventStationDisconnectFromAP *
       ctrl_msg__event__station_disconnect_from_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__station_disconnect_from_ap__free_unpacked
                     (CtrlMsgEventStationDisconnectFromAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsgEventStationDisconnectFromESPSoftAP methods */
void   ctrl_msg__event__station_disconnect_from_espsoft_ap__init
                     (CtrlMsgEventStationDisconnectFromESPSoftAP         *message);
size_t ctrl_msg__event__station_disconnect_from_espsoft_ap__get_packed_size
                     (const CtrlMsgEventStationDisconnectFromESPSoftAP   *message);
size_t ctrl_msg__event__station_disconnect_from_espsoft_ap__pack
                     (const CtrlMsgEventStationDisconnectFromESPSoftAP   *message,
                      uint8_t             *out);
size_t ctrl_msg__event__station_disconnect_from_espsoft_ap__pack_to_buffer
                     (const CtrlMsgEventStationDisconnectFromESPSoftAP   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsgEventStationDisconnectFromESPSoftAP *
       ctrl_msg__event__station_disconnect_from_espsoft_ap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__event__station_disconnect_from_espsoft_ap__free_unpacked
                     (CtrlMsgEventStationDisconnectFromESPSoftAP *message,
                      ProtobufCAllocator *allocator);
/* CtrlMsg methods */
void   ctrl_msg__init
                     (CtrlMsg         *message);
size_t ctrl_msg__get_packed_size
                     (const CtrlMsg   *message);
size_t ctrl_msg__pack
                     (const CtrlMsg   *message,
                      uint8_t             *out);
size_t ctrl_msg__pack_to_buffer
                     (const CtrlMsg   *message,
                      ProtobufCBuffer     *buffer);
CtrlMsg *
       ctrl_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctrl_msg__free_unpacked
                     (CtrlMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ScanResult_Closure)
                 (const ScanResult *message,
                  void *closure_data);
typedef void (*ConnectedSTAList_Closure)
                 (const ConnectedSTAList *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetMacAddress_Closure)
                 (const CtrlMsgReqGetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetMacAddress_Closure)
                 (const CtrlMsgRespGetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetMode_Closure)
                 (const CtrlMsgReqGetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetMode_Closure)
                 (const CtrlMsgRespGetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetMode_Closure)
                 (const CtrlMsgReqSetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetMode_Closure)
                 (const CtrlMsgRespSetMode *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetStatus_Closure)
                 (const CtrlMsgReqGetStatus *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetStatus_Closure)
                 (const CtrlMsgRespGetStatus *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetMacAddress_Closure)
                 (const CtrlMsgReqSetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetMacAddress_Closure)
                 (const CtrlMsgRespSetMacAddress *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetAPConfig_Closure)
                 (const CtrlMsgReqGetAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetAPConfig_Closure)
                 (const CtrlMsgRespGetAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqConnectAP_Closure)
                 (const CtrlMsgReqConnectAP *message,
                  void *closure_data);
typedef void (*CtrlMsgRespConnectAP_Closure)
                 (const CtrlMsgRespConnectAP *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetSoftAPConfig_Closure)
                 (const CtrlMsgReqGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetSoftAPConfig_Closure)
                 (const CtrlMsgRespGetSoftAPConfig *message,
                  void *closure_data);
typedef void (*CtrlMsgReqStartSoftAP_Closure)
                 (const CtrlMsgReqStartSoftAP *message,
                  void *closure_data);
typedef void (*CtrlMsgRespStartSoftAP_Closure)
                 (const CtrlMsgRespStartSoftAP *message,
                  void *closure_data);
typedef void (*CtrlMsgReqScanResult_Closure)
                 (const CtrlMsgReqScanResult *message,
                  void *closure_data);
typedef void (*CtrlMsgRespScanResult_Closure)
                 (const CtrlMsgRespScanResult *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSoftAPConnectedSTA_Closure)
                 (const CtrlMsgReqSoftAPConnectedSTA *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSoftAPConnectedSTA_Closure)
                 (const CtrlMsgRespSoftAPConnectedSTA *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTABegin_Closure)
                 (const CtrlMsgReqOTABegin *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTABegin_Closure)
                 (const CtrlMsgRespOTABegin *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTAWrite_Closure)
                 (const CtrlMsgReqOTAWrite *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTAWrite_Closure)
                 (const CtrlMsgRespOTAWrite *message,
                  void *closure_data);
typedef void (*CtrlMsgReqOTAEnd_Closure)
                 (const CtrlMsgReqOTAEnd *message,
                  void *closure_data);
typedef void (*CtrlMsgRespOTAEnd_Closure)
                 (const CtrlMsgRespOTAEnd *message,
                  void *closure_data);
typedef void (*CtrlMsgReqVendorIEData_Closure)
                 (const CtrlMsgReqVendorIEData *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetSoftAPVendorSpecificIE_Closure)
                 (const CtrlMsgReqSetSoftAPVendorSpecificIE *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetSoftAPVendorSpecificIE_Closure)
                 (const CtrlMsgRespSetSoftAPVendorSpecificIE *message,
                  void *closure_data);
typedef void (*CtrlMsgReqSetWifiMaxTxPower_Closure)
                 (const CtrlMsgReqSetWifiMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgRespSetWifiMaxTxPower_Closure)
                 (const CtrlMsgRespSetWifiMaxTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgReqGetWifiCurrTxPower_Closure)
                 (const CtrlMsgReqGetWifiCurrTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgRespGetWifiCurrTxPower_Closure)
                 (const CtrlMsgRespGetWifiCurrTxPower *message,
                  void *closure_data);
typedef void (*CtrlMsgReqConfigHeartbeat_Closure)
                 (const CtrlMsgReqConfigHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgRespConfigHeartbeat_Closure)
                 (const CtrlMsgRespConfigHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgEventESPInit_Closure)
                 (const CtrlMsgEventESPInit *message,
                  void *closure_data);
typedef void (*CtrlMsgEventHeartbeat_Closure)
                 (const CtrlMsgEventHeartbeat *message,
                  void *closure_data);
typedef void (*CtrlMsgEventStationDisconnectFromAP_Closure)
                 (const CtrlMsgEventStationDisconnectFromAP *message,
                  void *closure_data);
typedef void (*CtrlMsgEventStationDisconnectFromESPSoftAP_Closure)
                 (const CtrlMsgEventStationDisconnectFromESPSoftAP *message,
                  void *closure_data);
typedef void (*CtrlMsg_Closure)
                 (const CtrlMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ctrl__vendor_ietype__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__vendor_ieid__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_mode__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_bw__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_power_save__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__wifi_sec_prot__descriptor;
extern const ProtobufCEnumDescriptor    ctrl__status__descriptor;
extern const ProtobufCEnumDescriptor    ctrl_msg_type__descriptor;
extern const ProtobufCEnumDescriptor    ctrl_msg_id__descriptor;
extern const ProtobufCMessageDescriptor scan_result__descriptor;
extern const ProtobufCMessageDescriptor connected_stalist__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_mode__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_status__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_status__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_mac_address__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__connect_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__connect_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_soft_apconfig__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__start_soft_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__start_soft_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__scan_result__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__scan_result__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__soft_apconnected_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__soft_apconnected_sta__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otabegin__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otabegin__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otawrite__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otawrite__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__otaend__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__otaend__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__vendor_iedata__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_soft_apvendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_soft_apvendor_specific_ie__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__set_wifi_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__set_wifi_max_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__get_wifi_curr_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__get_wifi_curr_tx_power__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__req__config_heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__resp__config_heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__espinit__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__heartbeat__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__station_disconnect_from_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__event__station_disconnect_from_espsoft_ap__descriptor;
extern const ProtobufCMessageDescriptor ctrl_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_esp_5fhosted_5fconfig_2eproto__INCLUDED */
